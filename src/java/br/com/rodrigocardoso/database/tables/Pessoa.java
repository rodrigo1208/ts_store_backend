/*
 * This file is generated by jOOQ.
*/
package br.com.rodrigocardoso.database.tables;


import br.com.rodrigocardoso.database.Indexes;
import br.com.rodrigocardoso.database.Keys;
import br.com.rodrigocardoso.database.Public;
import br.com.rodrigocardoso.database.enums.TipoPessoas;
import br.com.rodrigocardoso.database.tables.records.PessoaRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pessoa extends TableImpl<PessoaRecord> {

    private static final long serialVersionUID = -1618208119;

    /**
     * The reference instance of <code>public.pessoa</code>
     */
    public static final Pessoa PESSOA = new Pessoa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PessoaRecord> getRecordType() {
        return PessoaRecord.class;
    }

    /**
     * The column <code>public.pessoa.created_date</code>.
     */
    public final TableField<PessoaRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.pessoa.created_user</code>.
     */
    public final TableField<PessoaRecord, UUID> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.pessoa.updated_date</code>.
     */
    public final TableField<PessoaRecord, Timestamp> UPDATED_DATE = createField("updated_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.pessoa.updated_user</code>.
     */
    public final TableField<PessoaRecord, UUID> UPDATED_USER = createField("updated_user", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.pessoa.active</code>.
     */
    public final TableField<PessoaRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.pessoa.id</code>.
     */
    public final TableField<PessoaRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.pessoa.nome</code>.
     */
    public final TableField<PessoaRecord, String> NOME = createField("nome", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pessoa.telefone</code>.
     */
    public final TableField<PessoaRecord, String> TELEFONE = createField("telefone", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.pessoa.pessoa</code>.
     */
    public final TableField<PessoaRecord, TipoPessoas> PESSOA_ = createField("pessoa", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(br.com.rodrigocardoso.database.enums.TipoPessoas.class), this, "");

    /**
     * Create a <code>public.pessoa</code> table reference
     */
    public Pessoa() {
        this(DSL.name("pessoa"), null);
    }

    /**
     * Create an aliased <code>public.pessoa</code> table reference
     */
    public Pessoa(String alias) {
        this(DSL.name(alias), PESSOA);
    }

    /**
     * Create an aliased <code>public.pessoa</code> table reference
     */
    public Pessoa(Name alias) {
        this(alias, PESSOA);
    }

    private Pessoa(Name alias, Table<PessoaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pessoa(Name alias, Table<PessoaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PESSOA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PessoaRecord> getPrimaryKey() {
        return Keys.PESSOA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PessoaRecord>> getKeys() {
        return Arrays.<UniqueKey<PessoaRecord>>asList(Keys.PESSOA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pessoa as(String alias) {
        return new Pessoa(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pessoa as(Name alias) {
        return new Pessoa(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pessoa rename(String name) {
        return new Pessoa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pessoa rename(Name name) {
        return new Pessoa(name, null);
    }
}
