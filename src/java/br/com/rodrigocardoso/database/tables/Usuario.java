/*
 * This file is generated by jOOQ.
*/
package br.com.rodrigocardoso.database.tables;


import br.com.rodrigocardoso.database.Indexes;
import br.com.rodrigocardoso.database.Keys;
import br.com.rodrigocardoso.database.Public;
import br.com.rodrigocardoso.database.tables.records.UsuarioRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usuario extends TableImpl<UsuarioRecord> {

    private static final long serialVersionUID = 705471324;

    /**
     * The reference instance of <code>public.usuario</code>
     */
    public static final Usuario USUARIO = new Usuario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsuarioRecord> getRecordType() {
        return UsuarioRecord.class;
    }

    /**
     * The column <code>public.usuario.created_date</code>.
     */
    public final TableField<UsuarioRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.usuario.created_user</code>.
     */
    public final TableField<UsuarioRecord, UUID> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.usuario.updated_date</code>.
     */
    public final TableField<UsuarioRecord, Timestamp> UPDATED_DATE = createField("updated_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.usuario.updated_user</code>.
     */
    public final TableField<UsuarioRecord, UUID> UPDATED_USER = createField("updated_user", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.usuario.active</code>.
     */
    public final TableField<UsuarioRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.usuario.id</code>.
     */
    public final TableField<UsuarioRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.usuario.nome</code>.
     */
    public final TableField<UsuarioRecord, String> NOME = createField("nome", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usuario.email</code>.
     */
    public final TableField<UsuarioRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.usuario.senha</code>.
     */
    public final TableField<UsuarioRecord, String> SENHA = createField("senha", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usuario.salt</code>.
     */
    public final TableField<UsuarioRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usuario.user_token</code>.
     */
    public final TableField<UsuarioRecord, String> USER_TOKEN = createField("user_token", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.usuario</code> table reference
     */
    public Usuario() {
        this(DSL.name("usuario"), null);
    }

    /**
     * Create an aliased <code>public.usuario</code> table reference
     */
    public Usuario(String alias) {
        this(DSL.name(alias), USUARIO);
    }

    /**
     * Create an aliased <code>public.usuario</code> table reference
     */
    public Usuario(Name alias) {
        this(alias, USUARIO);
    }

    private Usuario(Name alias, Table<UsuarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usuario(Name alias, Table<UsuarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USUARIO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsuarioRecord> getPrimaryKey() {
        return Keys.USUARIO_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsuarioRecord>> getKeys() {
        return Arrays.<UniqueKey<UsuarioRecord>>asList(Keys.USUARIO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usuario as(String alias) {
        return new Usuario(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usuario as(Name alias) {
        return new Usuario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(String name) {
        return new Usuario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(Name name) {
        return new Usuario(name, null);
    }
}
